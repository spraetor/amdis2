# This configuration file is shipped with the great FEM-Toolbox AMDiS.
# It simplifies the configure of different amdis-versions.
#
# In order to compile an amdis-project and link against the amdis
# (and subsequent) libraries simply add 'AMDiS' to the target_link_libraries
# of your executable target. All include-paths and additional libraries are
# automatically added.
#
# For a fast start, you use this package in the following way
# simply look for it, possibly set the AMDiS directory
#
#   find_package(AMDiS REQUIRED)
#   add_executable(yourTarget <yourSources>)
#   target_link_libraries(yourTarget AMDiS)
#

if (${CMAKE_VERSION} VERSION_LESS "3.2")
    message(FATAL_ERROR "The Configuration file was created for CMake version >= 3.2")
endif ()

list(APPEND CMAKE_MODULE_PATH ${AMDIS_DIR})

set(IS_AMDISCONFIG true)

set(AMDIS_USE_FILE ${AMDIS_DIR}/AMDISUse.cmake)
#set(AMDIS_NEED_ZOLTAN @ENABLE_ZOLTAN@)
set(AMDIS_NEED_UMFPACK @ENABLE_UMFPACK@)
#set(AMDIS_HAS_PARALLEL_DOMAIN @ENABLE_PARALLEL_DOMAIN@)
#set(AMDIS_NEED_EXTENSIONS @ENABLE_EXTENSIONS@)
#set(AMDIS_NEED_BASE_PROBLEMS @ENABLE_BASE_PROBLEMS@)
#set(AMDIS_NEED_REINIT @ENABLE_REINIT@)
#set(AMDIS_NEED_COMPOSITE_FEM @ENABLE_COMPOSITE_FEM@)

set(BUILD_SHARED_LIBS @BUILD_SHARED_LIBS@)
set(CMAKE_BUILD_TYPE @CMAKE_BUILD_TYPE@)

add_library(amdis_base INTERFACE)
add_library(AMDiS ALIAS amdis_base)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
target_compile_definitions(amdis_base INTERFACE HAS_CXX11=1)


# try to detect the AMDiS include directory
# -------------------------------------------
find_file(_AMDIS_H AMDiS.h PATHS ${AMDIS_DIR}/../../include/amdis/)
if (_AMDIS_H)
    get_filename_component(AMDIS_INCLUDE_DIR ${_AMDIS_H} PATH CACHE)
    target_include_directories(amdis_base INTERFACE ${AMDIS_INCLUDE_DIR})
    include(find_mtl4)
else ()
    message(ERROR "Could not detect the AMDiS include directory. Please set the variable AMDIS_INCLUDE_DIR to the directory containing the AMDiS headers.")
endif ()
unset(_AMDIS_H CACHE)


# AMDiS base libraries
# --------------------
find_library(_AMDIS_LIB amdis PATHS ${AMDIS_DIR}/../../lib/amdis/)
if (_AMDIS_LIB)
    target_link_libraries(amdis_base INTERFACE ${_AMDIS_LIB})
else ()
    message(ERROR "Could not detect the AMDiS library. Please set the variable _AMDIS_LIB to the AMDiS library.")
endif ()
unset(_AMDIS_LIB CACHE)


# Boost libraries
# ---------------
if (NOT BOOST_ROOT)
    set(BOOST_ROOT @BOOST_ROOT@)
endif (NOT BOOST_ROOT)
if (NOT BOOST_LIBRARYDIR)
    set(BOOST_LIBRARYDIR @BOOST_LIBRARYDIR@)
endif (NOT BOOST_LIBRARYDIR)
include(find_boost)

# umfpack library
# --------------------
if (AMDIS_NEED_UMFPACK)
    set(AMDIS_SuiteSparse_DIR @SuiteSparse_DIR@)
    set(AMDIS_UMFPACK_INCLUDE_DIR @UMFPACK_INCLUDE_DIRS@)
    set(AMDIS_UMFPACK_LIB_DIR ${AMDIS_UMFPACK_INCLUDE_DIR}/../include)
    include(find_umfpack)
endif (AMDIS_NEED_UMFPACK)


# muparser library
# --------------------
find_library(_MUPARSER_LIB muparser PATHS ${AMDIS_DIR}/../../lib/amdis/)
if (_MUPARSER_LIB)
    target_include_directories(amdis_base INTERFACE ${AMDIS_INCLUDE_DIR}/muparser)
    target_link_libraries(amdis_base INTERFACE ${_MUPARSER_LIB})
else ()
    message(ERROR "MuParser library not found")
endif ()
unset(_MUPARSER_LIB CACHE)

set(AMDIS_LIBRARIES AMDiS)
